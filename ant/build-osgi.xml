<!-- Build file for the Phonebook Example plugin PDE unit test fragment -->
<project basedir=".." default="help" name="build-osgi">
	<import file="build-properties.xml" />

	<property name="code.analysis.dir" value="/home/hudson/codeqa" description="home of all analysis libraries"/>
	<!--
	<property name="plugin.dir" location="${basedir}"  />
	<property name="projects.dir" location="${basedir}/.." />
	<property file="eclipse/project.properties" />
	-->
	<property name="plugin.name" value="${project.name}" />
	<property name="pde.test.utils.version" value="3.5.0" />
	<property name="eclipse.dir" value="${code.analysis.dir}/eclipse/eclipse-3.6.2" />
	<property name="plugins.dir" location="${eclipse.dir}/plugins" />
	<property name="reports.dir" location="${build.dir}/eclipse-reports" />
	<property name="test.reports.dir" location="${reports.dir}/test" />

	<path id="build.class.path">
		<fileset dir="${plugins.dir}">
			<include name="org.eclipse.core.runtime_*.jar" />
			<include name="org.eclipse.equinox.common_*.jar" />
			<include name="org.eclipse.ui.workbench_*.jar" />
			<include name="org.eclipse.jface_*.jar" />
			<include name="org.eclipse.swt_*.jar" />
			<include name="org.junit_4.*/**/*" />
		</fileset>
	</path>

	<path id="pde.test.listener.class.path">
		<path refid="build.class.path" />
		<pathelement location="${plugins.dir}/pde.test.utils_${pde.test.utils.version}.jar" />
		<fileset dir="${plugins.dir}">
			<include name="org.apache.ant_*/**/ant.jar" />
			<include name="org.apache.ant_*/**/ant-junit.jar" />
			<include name="org.eclipse.jdt.junit_*.jar" />
			<include name="org.eclipse.jdt.junit.*.jar" />
			<include name="org.eclipse.debug.core_*.jar" />
			<include name="org.eclipse.osgi_*.jar" />
			<include name="org.eclipse.core.resources_*.jar" />
			<include name="org.eclipse.swt_*.jar" />
			<include name="org.eclipse.equinox.preferences_*.jar" />
		</fileset>
	</path>

	<path id="pde.test.port.locator.class.path">
		<pathelement location="${plugins.dir}/pde.test.utils_${pde.test.utils.version}.jar" />
		<fileset dir="${plugins.dir}">
			<include name="org.junit_4.*/**/junit.jar" />
		</fileset>
	</path>

	<path id="equinox.launcher.class.path">
		<fileset dir="${plugins.dir}">
			<include name="org.eclipse.equinox.launcher_*.jar" />
		</fileset>
	</path>

	<target depends="pde_test, generate_report, check_results" name="test" />

	<target name="init-plugins" description="copy plugins to target platform">
		<delete>
			<fileset dir="${plugins.dir}" includes="ccp*bundle-test.jar"/>
		</delete>
		<copy todir="${plugins.dir}" overwrite="true">
			<fileset dir="${build.distribution.dir}" includes="ccp*bundle-test.jar" />
		</copy>
	</target>

	<target name="pde_test" description="runs tests; requires parameters xml.dir and test.class.names" unless="skip">
		<!--
		<antcall target="init-port"/>
		-->
		<echoproperties prefix="eclipse.dir"/>
		<!-- init port -->
		<delete file="pde_test_port.properties" />
		<!-- properties file generated by PDETestPortLocator class in pde.test.utils -->
		<java classname="pde.test.utils.PDETestPortLocator" 
			  classpathref="pde.test.port.locator.class.path" fork="yes" dir="${build.dir}"/>
		<waitfor checkevery="100" checkeveryunit="millisecond" maxwait="3" maxwaitunit="second">
			<available file="pde_test_port.properties" />
		</waitfor>
		<property file="${build.dir}/pde_test_port.properties" />
		<echo message="Using port ${pde.test.port} for listening to PDE Test run" />

		<antcall target="init-plugins"/>

		<parallel>
			<daemons>
				<antcall target="run_pde_test_listener"/>
			</daemons>
			<sequential>
				<sleep seconds="5" />
				<!-- Give the listener a few seconds to start up -->
				<antcall target="run_pde_tests" />
			</sequential>
		</parallel>
	</target>

	<target name="run_pde_test_listener">
		<delete dir="${xml.dir}"/>
		<mkdir dir="${xml.dir}"/>
		<java classname="pde.test.utils.PDETestResultsCollector" 
			  classpathref="pde.test.listener.class.path" fork="yes" dir="${build.dir}/test/unit/xml">
			<arg line="${plugin.name} ${pde.test.port}" />
		</java>
	</target>

	<target name="run_pde_tests" description="exectute tests in osgi ; requires parameter test.class.names">
		<mkdir dir="${test.reports.dir}/output/ws" />
		<java classname="org.eclipse.equinox.launcher.Main"
          classpathref="equinox.launcher.class.path"
          dir="${build.dir}"
          fork="yes">
			<arg line="-application org.eclipse.pde.junit.runtime.coretestapplication -data ${test.reports.dir}/output/ws -dev bin -clean -port ${pde.test.port} -testpluginname ${plugin.name} -classnames ${test.class.names} -testLoaderClass org.eclipse.jdt.internal.junit4.runner.JUnit4TestLoader -loaderpluginname org.eclipse.jdt.junit4.runtime" />
		</java>
	</target>

	<target name="generate_report">
		<junitreport todir="${test.reports.dir}">
			<fileset dir="${test.reports.dir}">
				<include name="TEST-*.xml" />
			</fileset>
			<report todir="${test.reports.dir}" />
		</junitreport>
	</target>

	<target name="check_results">
		<loadfile property="full.results.summary"
              srcfile="${test.reports.dir}/overview-summary.html" />
		<!-- works if you load 2 times ?? -->
		<loadfile property="results.summary"
              srcfile="${test.reports.dir}/overview-summary.html">
			<filterchain>
				<headfilter lines="30" />
				<linecontains>
					<contains value="%&lt;/td&gt;" />
				</linecontains>
			</filterchain>
		</loadfile>
		<echo>${results.summary}</echo>
		<condition property="tests.passed">
			<or>
				<contains string="${results.summary}" substring="100.00%" />
				<contains string="${results.summary}" substring="NaN" />
			</or>
		</condition>
		<fail message="FAILED - some tests failed - see ${test.reports.dir}/index.html for more details"
          unless="tests.passed" />
		<echo message="SUCCESS - all tests passed - see ${test.reports.dir}/index.html for more details" />
	</target>

	<target name="help">
		<echo>This is the ant build file for the Phonebook Example PDE
    Tests. Usage: Target Description ==============
    ============================================== [default]
    Displays this message. build Builds the source and creates the
    plugin jar. clean Cleans all the build and generated artefacts.
    test Builds and runs the PDE JUnit tests and generates a
    report.</echo>
	</target>
</project>
