<project name="build-analysis" default="run.full.analysis" basedir="..">
	<property name="build.reports.dir" value="${build.dir}/reports" />

	<property name="code.analysis.dir" value="/home/hudson/codeqa" />
	<property name="lib.analysis.dir" value="${code.analysis.dir}/lib-analysis" />
	<property name="findbugs.reports.dir" value="${build.reports.dir}/findbugs" />
	<property name="checkstyle.reports.dir" value="${build.reports.dir}/checkstyle" />
	<property name="pmd.reports.dir" value="${build.reports.dir}/pmd" />
	<property name="simian.reports.dir" value="${build.reports.dir}/duplicate-code" />
	<property name="statsvn.reports.dir" value="${build.reports.dir}/statsvn" />
	<property name="svn.user" value="build" />
	<property name="svn.pass" value="build" />

	<!-- Properties and task for conducting source code analysis -->
	<property name="findbugs.home" value="${code.analysis.dir}/findbugs" />
	<property name="findbugs.jar" value="${findbugs.home}/lib/findbugs.jar" />
	<property name="findbugs.jar" value="${findbugs.home}/lib/findbugs-ant.jar" />

	<typedef resource="org/tigris/subversion/svnant/svnantlib.xml" classpath="${ant.dir}/lib/" />


	<!-- The compile-test classpath contains jars used only for testing and source code analysis -->
	<path id="analysis.classpath">
		<fileset dir="${lib.analysis.dir}">
			<include name="**/*.jar" />
		</fileset>
		<pathelement path="${findbugs.jar}" />
		<pathelement path="${findbugs-ant.jar}" />
	</path>

	<target name="init.typedefs">
		<!-- Task definition required for FindBugs. Note, this must appear after the compile.test.classpath initialization to avoid a Warning message -->
		<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask">
			<classpath refid="analysis.classpath" />
		</taskdef>

		<!-- Task definition required for CheckStyle -->
		<taskdef resource="checkstyletask.properties">
			<classpath refid="analysis.classpath" />
		</taskdef>

		<!-- Task definition required for PMD -->
		<taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask">
			<classpath refid="analysis.classpath" />
		</taskdef>

		<!-- Task definition required for Simian -->
		<taskdef resource="simiantask.properties">
			<classpath refid="analysis.classpath" />
		</taskdef>

		<!-- Task definition required for StatSvn -->
		<taskdef name="statsvn" classname="net.sf.statsvn.ant.StatSvnTask" classpathref="analysis.classpath" />
	</target>


	<!-- Creates the directory structure for storing test and source code analysis results -->
	<target name="create.test.output.directories">
		<mkdir dir="${build.reports.dir}" />
	</target>

	<target name="run.full.analysis" depends="init.typedefs" description="">
		<antcall target="run.findbugs.analysis" />
		<antcall target="run.pmd.analysis" />
		<antcall target="run.duplicate.code.analysis" />
		<antcall target="run.checkstyle.analysis" />
		<antcall target="run.statsvn"/>
	</target>

	<!-- FindBugs Target -->
	<target name="run.findbugs.analysis" depends="init.typedefs">
		<antcall target="create.test.output.directories" />
		<echo message="Running FindBugs..." />
		<delete dir="${findbugs.reports.dir}" />
		<mkdir dir="${findbugs.reports.dir}" />
		<findbugs home="${findbugs.home}" outputFile="${findbugs.reports.dir}/findbugs.xml" jvmargs="-Xmx1024m">
			<auxClasspath>
				<pathelement path="${classpath.compile.property}" />
				<pathelement path="${classpath.compile.test.property}" />
			</auxClasspath>
			<sourcePath path="${source.dir}" />
			<class location="${build.classes.dir}" />
		</findbugs>
	</target>

	<!-- CheckStyle Target -->
	<target name="run.checkstyle.analysis" depends="init.typedefs" description="Generates a report of code convention violations.">
		<antcall target="create.test.output.directories" />
		<delete dir="${checkstyle.reports.dir}" />
		<mkdir dir="${checkstyle.reports.dir}" />
		<checkstyle config="${code.analysis.dir}/checkstyle/ccp_checkstyle.xml" failureProperty="checkstyle.failure" failOnViolation="false">
			<formatter type="xml" tofile="${checkstyle.reports.dir}/checkstyle-result.xml" />
			<fileset dir="${source.dir}" includes="**/*.java" />
			<fileset dir="${source.test.dir}" includes="**/*.java" />
		</checkstyle>
	</target>


	<!-- PMD Target -->
	<target name="run.pmd.analysis" depends="init.typedefs,create.test.output.directories">
		<delete dir="${pmd.reports.dir}" />
		<mkdir dir="${pmd.reports.dir}" />
		<echoproperties prefix="code.analysis" />
		<pmd shortFilenames="true" rulesetfiles="${code.analysis.dir}/pmd/ccp-pmd-rules.xml">
			<formatter type="xml" toFile="${pmd.reports.dir}/pmd.xml" />
			<fileset dir="${source.dir}" includes="**/*.java" />
			<fileset dir="${source.test.dir}" includes="**/*.java" />
		</pmd>
	</target>

	<!-- Simian Target -->
	<target name="run.duplicate.code.analysis" depends="init.typedefs">
		<antcall target="create.test.output.directories" />
		<delete dir="${simian.reports.dir}" />
		<mkdir dir="${simian.reports.dir}" />
		<simian threshold="6" language="java">
			<formatter type="xml" toFile="${simian.reports.dir}/simian-log.xml" />
			<fileset dir="${source.dir}" includes="**/*.java" />
		</simian>
	</target>

	<!-- SvnStats Target -->
	<target name="run.statsvn" depends="init.typedefs">
		<svn username="${svn.user}" password="${svn.pass}" svnkit="true" failonerror="true">
			<log path="${basedir}" destFile="${statsvn.reports.dir}/svn.log" xml="true" />
		</svn>
		<!--		<exec executable="svn" dir="${project.SrcDir}" output="${project.StatSVNReportDir}/svn-log.xml" searchpath="true">
			<arg line="log - -xml - -verbose" /> remove spaces from between hyphens if this code is uncommented
		</exec>
		-->
		<statsvn path="${source.dir}" log="${statsvn.reports.dir}/svn.log" outputDir="${statsvn.reports.dir}" title="StatSVN" />
	</target>


</project>
