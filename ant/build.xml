<project name="ccp-common" default="build" basedir="..">

	<property name="project.name" value="${ant.project.name}" />
	<property name="test-resources.jar.name" value="${project.name}-test-resources.jar" />
	<property name="code-analysis.dir" value=".code-analysis" />

	<!-- Project Directories -->
	<property name="ant.dir" value="ant" />
	<property name="ant.external.lib.dir" value="${ant.dir}/lib" />
	<property name="source.dir" value="src" />
	<property name="test.source.dir" value="test" />
	<property name="build.dir" value="build" />
	<property name="docs.dir" value="doc" />
	<property name="classes.dir" value="${build.dir}/classes" />
	<property name="distribution.dir" value="${build.dir}/distribution" />
	<property name="lib.dir" value="lib" />
	<property name="lib-test.dir" value="lib-test" />

	<!-- Import SVN user information - NOTE: PLEASE DO NOT REDISTRIBUTE THE build.properties FILE -->
	<property file="ant/build.properties" />

	<path id="svn.classpath">
		<fileset dir="${ant.external.lib.dir}">
			<include name="**/svn*.jar" />
		</fileset>
	</path>
	<typedef resource="org/tigris/subversion/svnant/svnantlib.xml" classpathref="svn.classpath" />

	<path id="ant.contrib.classpath">
		<fileset dir="${ant.external.lib.dir}">
			<include name="**/ant-contrib*.jar" />
		</fileset>
	</path>
	<taskdef resource="net/sf/antcontrib/antcontrib.properties" classpathref="ant.contrib.classpath" />

	<target name="init">
		<antcall target="package-test-resources" />
	</target>

	<!-- The compile classpath contains jars necessary for compile- and run-time. -->
	<path id="compile.classpath">
		<fileset dir="${lib.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<property name="compile.classpath.property" refid="compile.classpath" />

	<path id="compile.test.classpath">
		<fileset dir="${lib-test.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<!-- Packages the test resources into a JAR file -->
	<target name="package-test-resources" description="Packages non-java files in the test.source directory. These files are required to run the unit tests, and thus must be on the classpath.">
		<echo message="Packaging the test resources..." />
		<jar destFile="${lib-test.dir}/${test-resources.jar.name}">
			<fileset dir="${test.source.dir}">
				<include name="**/*.*" />
				<exclude name="**/*.java" />
			</fileset>
		</jar>
	</target>

	<target name="cleanup-postbuild">
		<delete file="${lib-test.dir}/${test-resources.jar.name}" />
	</target>

	<!-- Build and run unit tests only (no functional tests) -->
	<target name="build" depends="init,clean,compile,test.unit,package-project,cleanup-postbuild" description="Builds the project, runs all unit tests and packages into a jar file if the tests are successful." />

	<!-- Build and run code analyses -->
	<target name="build.code.analysis" depends="init,clean,compile,test.unit,package-project,complete.code.analysis,cleanup-postbuild" description="Builds the project and runs all source code analyses." />

	<!-- Deletes compiled and generated code -->
	<target name="clean" description="Deletes compiled and generated code">
		<delete dir="${build.dir}" />
	</target>

	<!-- Compiles the Java code -->
	<target name="compile" description="Compiles the Java code">
		<echo message="BASE DIRECTORY = ${basedir}" />
		<mkdir dir="${build.dir}" />
		<mkdir dir="${classes.dir}" />

		<javac srcdir="${source.dir}" destdir="${classes.dir}" debug="on" deprecation="off">
			<classpath refid="compile.classpath" />
		</javac>

		<javac srcdir="${test.source.dir}" destdir="${classes.dir}" debug="on" deprecation="off">
			<classpath refid="compile.classpath" />
			<classpath refid="compile.test.classpath" />
		</javac>

		<copy todir="${classes.dir}">
			<fileset dir="${source.dir}">
				<include name="**/*.properties" />
				<include name="**/*.xml" />
			</fileset>
		</copy>
	</target>

	<!-- Packages the project into a JAR file -->
	<target name="package-project" depends="compile" description="Packages the files into a JAR file">
		<mkdir dir="${distribution.dir}" />
		<echo message="Packaging the project..." />
		<svn username="${svn.build.user}" password="${svn.build.passwd}" svnkit="true">
			<wcversion path="${basedir}" />
		</svn>
		<propertyregex property="branch.name" input="${repository.path}" regexp="/([^/]+)$" select="\1" />
		<echo message="${repository.path}" />
		<jar destFile="${distribution.dir}/${project.name}-${branch.name}-${committed.max-with-flags}.jar">
			<fileset dir="${classes.dir}">
				<include name="**/*.*" />
				<exclude name="**/*Test.*" />
				<exclude name="**/*TestFn.*" />
			</fileset>
		</jar>
	</target>

	<!-- Builds the Javadocs -->
	<target name="create-javadoc">
		<javadoc packagenames="edu.uchsc.ccp.*" sourcepath="${source.dir}" destdir="${docs.dir}/api" windowtitle="Center for Computational Pharmacology Biomedical Discovery Accelerator API" linksource="true">
			<classpath>
				<path refid="compile.classpath" />
				<pathelement location="${classes.dir}" />
			</classpath>
			<link href="http://java.sun.com/j2se/1.5.0/docs/api/" />
			<doctitle>
				<![CDATA[<h1>Center for Computational Pharmacology API</h1>]]>
			</doctitle>
	</javadoc>
</target>

<!-- Sets the needs.code.analysis.tools property of the code-analysis directory is not present -->
<condition property="needs.code.analysis.tools">
	<not>
		<available type="dir" file="${code-analysis.dir}" />
	</not>
</condition>

<!-- Imports tools for running tests and code analyses from the codeqa project -->
<target name="import.code.analysis.tools" if="needs.code.analysis.tools">
	<delete dir="${code-analysis.dir}" />
	<mkdir dir="${code-analysis.dir}" />
	<svn username="${svn.build.user}" password="${svn.build.passwd}" svnkit="true">
		<checkout url="http://compbio.ucdenver.edu/svn/ccp/codeqa/trunk" revision="HEAD" destPath="${code-analysis.dir}" />
	</svn>
</target>

<target name="test.unit" depends="init, package-project,import.code.analysis.tools">
	<ant antfile="${code-analysis.dir}/ant/testing.xml" inheritall="true" inheritrefs="true" target="test.unit" />
	<antcall target="cleanup-postbuild" />
</target>

<target name="test.fn" depends="init, package-project,import.code.analysis.tools">
	<ant antfile="${code-analysis.dir}/ant/testing.xml" inheritall="true" inheritrefs="true" target="test.unit" />
	<antcall target="cleanup-postbuild" />
</target>

<target name="coverage.analysis" depends="init, package-project,import.code.analysis.tools">
	<ant antfile="${code-analysis.dir}/ant/testing.xml" inheritall="true" inheritrefs="true" target="run.coverage.analysis" />
	<antcall target="cleanup-postbuild" />
</target>

<target name="run.findbugs" depends="init, package-project,import.code.analysis.tools">
	<ant antfile="${code-analysis.dir}/ant/analyze.xml" inheritall="true" inheritrefs="true" target="run.findbugs.analysis" />
	<antcall target="cleanup-postbuild" />
</target>

<target name="run.checkstyle" depends="init, package-project,import.code.analysis.tools">
	<ant antfile="${code-analysis.dir}/ant/analyze.xml" inheritall="true" inheritrefs="true" target="run.checkstyle.analysis" />
	<antcall target="cleanup-postbuild" />
</target>

<target name="run.pmd" depends="init, package-project,import.code.analysis.tools">
	<ant antfile="${code-analysis.dir}/ant/analyze.xml" inheritall="true" inheritrefs="true" target="run.pmd.analysis" />
	<antcall target="cleanup-postbuild" />
</target>

<target name="run.duplicate.code.finder" depends="init, package-project,import.code.analysis.tools">
	<ant antfile="${code-analysis.dir}/ant/analyze.xml" inheritall="true" inheritrefs="true" target="run.duplicate.code.analysis" />
	<antcall target="cleanup-postbuild" />
</target>

<target name="complete.code.analysis" depends="init, package-project,import.code.analysis.tools" description="Conducts an analysis of the code in this project as defined by the settings in the code-analysis project (available in SVN).">
	<ant antfile="${code-analysis.dir}/ant/testing.xml" inheritall="true" inheritrefs="true" target="run.coverage.analysis" />
	<ant antfile="${code-analysis.dir}/ant/analyze.xml" inheritall="true" inheritrefs="true" target="run.findbugs.analysis" />
	<ant antfile="${code-analysis.dir}/ant/analyze.xml" inheritall="true" inheritrefs="true" target="run.pmd.analysis" />
	<ant antfile="${code-analysis.dir}/ant/analyze.xml" inheritall="true" inheritrefs="true" target="run.duplicate.code.analysis" />
	<ant antfile="${code-analysis.dir}/ant/analyze.xml" inheritall="true" inheritrefs="true" target="run.checkstyle.analysis" />
	<antcall target="cleanup-postbuild" />
</target>

</project>
