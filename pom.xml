<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>

	<!-- coordinates -->
	<groupId>edu.ucdenver.ccp</groupId>
	<artifactId>common</artifactId>
	<packaging>jar</packaging>
	<version>1.5.4</version>

	<name>common</name>
	<description>The ccp-common project contains utility code for a variety of "common" tasks
	</description>

	<dependencies>
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
			<version>4.5.2</version>
		</dependency>
		<dependency>
			<groupId>org.mockftpserver</groupId>
			<artifactId>MockFtpServer</artifactId>
			<version>2.1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.ant</groupId>
			<artifactId>ant</artifactId>
			<version>1.8.0</version>
		</dependency>
		<dependency>
			<groupId>commons-net</groupId>
			<artifactId>commons-net</artifactId>
			<version>2.0</version>
		</dependency>
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.12</version>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.8.2</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.0</version>
		</dependency>
		<dependency>
			<groupId>org.osgi</groupId>
			<artifactId>org.osgi.core</artifactId>
			<version>4.2.0</version>
		</dependency>
		<dependency>
			<groupId>commons-codec</groupId>
			<artifactId>commons-codec</artifactId>
			<version>1.6</version>
		</dependency>
		<dependency>
			<groupId>HTTPClient</groupId>
			<artifactId>HTTPClient</artifactId>
			<version>0.3-3</version>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>1.16.10</version>
			<scope>provided</scope>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml -->
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi-ooxml</artifactId>
			<version>3.15</version>
		</dependency>

	</dependencies>


	<build>
		<plugins>
			<!-- Here we create a test-jar jar file so that test classes in this project 
				can be used by other projects. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>2.2</version>
				<executions>
					<execution>
						<goals>
							<goal>test-jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- specify the java version -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.0.2</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>
			<!-- create a source jar file -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<version>2.4</version>
				<executions>
					<execution>
						<id>attach-sources</id>
						<phase>verify</phase>
						<goals>
							<goal>jar-no-fork</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- javadoc -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>2.10.3</version>
				<configuration>
					<failOnError>false</failOnError>
					<notimestamp>true</notimestamp>
					<linksource>true</linksource>
					<links>
						<link>http://docs.oracle.com/javase/8/docs/api/</link>
						<link>http://junit.sourceforge.net/javadoc/</link>
					</links>
				</configuration>
				<executions>
					<execution>
						<id>attach-javadocs</id>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-release-plugin</artifactId>
				<version>2.2</version>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>2.4</version>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>license-maven-plugin</artifactId>
				<version>1.7</version>
				<configuration>
					<verbose>false</verbose>
					<encoding>UTF-8</encoding>
					<inceptionYear>2012</inceptionYear>
					<organizationName>Regents of the University of Colorado</organizationName>
					<projectName>Colorado Computational Pharmacology's common module</projectName>
					<licenseName>bsd_3</licenseName>
				</configuration>
				<executions>
					<execution>
						<id>first</id>
						<goals>
							<goal>update-file-header</goal>
						</goals>
						<phase>process-sources</phase>
						<configuration>
							<roots>
								<root>src/main/java</root>
								<root>src/test/java</root>
							</roots>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>external.atlassian.jgitflow</groupId>
				<artifactId>jgitflow-maven-plugin</artifactId>
				<version>1.0-m5.1</version>
				<configuration>
					<!-- Enable this to push to origin using SSH keys -->
					<enableSshAgent>false</enableSshAgent>
					<!-- Keep your maven submodules at the same version as the parent POM -->
					<autoVersionSubmodules>true</autoVersionSubmodules>
					<!-- Pusing in-development features to origin allows all devs to see 
						what each other are working on -->
					<pushFeatures>false</pushFeatures>
					<!-- This allows the CI server (e.g. Jenkins) to automatically push 
						new releases to origin; you can then either manually deploy them or, if you 
						are doing Continuous Deployments, auto-deploy them to prod -->
					<pushReleases>false</pushReleases>
					<!-- Hot Fixes should be pushed to origin as well so that any dev can 
						pick them up -->
					<pushHotfixes>false</pushHotfixes>
					<!-- Prevents deployments from dev workstations so that they can be 
						done by a CI server -->
					<noDeploy>true</noDeploy>
					<flowInitContext>
						<!-- You can customize your development branch name. Why? Because it's 
							faster to type 'git push origin dvlp' than 'git push origin develop' ;-) -->
						<developBranchName>development</developBranchName>
						<!-- You can also customize your tag prefixes -->
						<versionTagPrefix>rev-</versionTagPrefix>
					</flowInitContext>
				</configuration>
			</plugin>
		</plugins>
		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings 
					only. It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.codehaus.mojo
										</groupId>
										<artifactId>
											license-maven-plugin
										</artifactId>
										<versionRange>
											[1.7,)
										</versionRange>
										<goals>
											<goal>
												update-file-header
											</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore />
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>
</project>
